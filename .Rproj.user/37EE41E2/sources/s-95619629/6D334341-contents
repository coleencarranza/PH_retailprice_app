library(shiny)
library(ggplot2)
library(scales)
library(DT)
library(dplyr)
library(leaflet)
##--------------------DATA -----------------
## Read retail price data script:
source("./retail_prices_data.R")


# Create UI
ui <- fluidPage(
  # Application title
  titlePanel("Retail Prices of Commodities in the Philippines"),
  p("Data source: "),
  tags$ul(
    tags$li("Philippine Statistics Authority (PSA)",
            tags$a("OpenSTAT Database", href="https://openstat.psa.gov.ph/")
    )
  ),
  tags$br(),
  tags$hr(),
  #side bar options:
  sidebarLayout(
    sidebarPanel(width = 3,
                 selectInput("Var0", "Select Commodity Group", choices = unique(df$Group)), 
                 selectInput("Var1", "Select Commodity",choices=""),
                 selectInput("Var2", "Select Admininstative level", choices = ""),
                 selectInput("Var3", "Select Specific Unit", choices = ""),
                 selectInput("Var4", "Show subsequent sub-units?", 
                             choices = list("Yes" = "w_sub","No" = "wo_sub"),selected = "w_sub"),
                 uiOutput("conditionalInputVar4"),  #only show if yes
                 sliderInput("Var5", "Select Date Range:",
                             min = min(df$Date),
                             max = max(df$Date),
                             value=c(min(df$Date),max(df$Date)),
                             timeFormat="%d-%m-%Y")
                 
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Plot", 
                 plotOutput("Priceplot"),leafletOutput("PriceMap")), 
        
        
        tabPanel("Table", tableOutput("table")),
        
        
        tabPanel("Summary + Statistics", verbatimTextOutput("summary")) 
      )
    )
    )
  )


# Define server logic 
server <- function(input, output, session) {
  #----------------------------Data wrangling:----------------------------------
  selectedvariable0 <- reactive({
    filter(df, Group == input$Var0)
  })
  observeEvent(selectedvariable0(), {#Update Commodity dropdown
    choices <- unique(selectedvariable0()$Commodity)
    updateSelectInput(inputId = "Var1", choices = choices) 
  })
  
  selectedvariable1 <- reactive({
    req(input$Var0)
    filter(selectedvariable0(), Commodity == input$Var1)
  })
  observeEvent(selectedvariable1(), {#Update Admin_level dropdown
    choices <- unique(selectedvariable1()$Admin_level)
    updateSelectInput(inputId = "Var2", choices = choices)
  })
  
  selectedvariable2 <- reactive({
    req(input$Var1)
    filter(selectedvariable1(), Admin_level == input$Var2)
  })
  observeEvent(selectedvariable2(), { #Update specific province/Region
    choices <- unique(selectedvariable2()$Region.Province)
    updateSelectInput(inputId = "Var3", choices = choices)
  })
  
  
  # renderUI for conditional checkbox subUnits
  output$conditionalInputVar4 <- renderUI({
    if(input$Var4=="w_sub"){
      checkboxInput("show_subUnits", "Plot subUnits?", FALSE)
    }
  }) 
  
  
 
  #Data SUBSETS based on inputs:
  #non-spatial:
  df_plot<-reactive({
    df %>%
      dplyr::filter(Commodity == input$Var1,
                    Region.Province == input$Var3,
                    Date >= input$Var5[1],Date <= input$Var5[2],) %>%
      select(Region.Province,Date,Price,Admin_level)
  })
  
  #Conditional checkerbox subset data
  cond_subUnits <-reactive ({
    if(!is.null(input$show_subUnits)){
      if(input$show_subUnits==TRUE & input$Var4=="w_sub" & input$Var2=="Region") {
       df_subUnits<- df_plot() 
       
       df_subUnits %>% filter(str_detect(Region.Province, input$Var3), Admin_level == "Province")%>%
         select(Region.Province,Date,Price)
      }
    }
  })
  
  #SPATIAL (sf object):
  df_geom <- reactive({
    if(input$Var2 == "Region")
    ph_geom %>%
      dplyr::filter(ADM
  })
    
    
    
    ph_geom %>%
    filter(ADM1_EN == "Region V") %>%
    left_join(df_yr)
  
  centr<- df_geom %>%
    st_union() %>%
    st_centroid %>%
    unlist

  #----------------------Output TAB1:-------------------------------------------
  #Time series
  output$Priceplot <- renderPlot({
    dataset <- df_plot()
    
    p <- ggplot(dataset, aes(x = Date,y = Price)) +
      geom_line() +
      geom_point() +
      scale_x_date(limits = input$DateRange,labels = date_format("%b-%Y")) +
      labs(x = "Date", y = "Suggested Retail Price (SRP) in PhP") +
      theme_bw()
    
    #Conditionally add more lines based on checkerbox:
    if(input$show_subUnits & input$Var4=="w_sub" & input$Var2=="Region") {
      dataset_subUnits <- cond_subUnits()
      
      p <- p + 
        geom_line(data=dataset_subUnits,aes(x=Date,y=Price, group = Region.Province, color = "blue")) +
        geom_point(data=dataset_subUnits,aes(x=Date,y=Price, group = Region.Province,color="blue"))
    }
    
    p
  })
  #Interactive map:
  
  
}

# Run the application 
shinyApp(ui = ui, server = server)





