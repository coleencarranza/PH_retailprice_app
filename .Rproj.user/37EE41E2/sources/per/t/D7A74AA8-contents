# Define server logic 
server <- function(input, output, session) {
  #================--------TAB 1----------=================
  #T1 reactive UI
  #Select/deselect
  observe({
    if(input$selectall == 0) return(NULL) 
    else if (input$selectall%%2 == 0)
    { updateCheckboxGroupInput(session,"T1_CommGrp","Choose commodity  Group(s):",choices=commod_names,selected=commod_names)
    } else{
      updateCheckboxGroupInput(session,"T1_CommGrp","Choose commodity  Group(s):",choices=commod_names)
    }
  })
  
  #renderUI for conditional admin_level
  output$T1_regio_select <- renderUI({
    if(input$T1_Regio_Natio == "subreg"){
      selectInput("regio_list", "Select region:", regions, selected = "Region I")}
  })
  
  #T1 DATA WRANGLING:
  #select provinces  sub national or subregional depends on input
  t1prov_sub <- reactive({  #vector of provinces
    if(input$T1_Regio_Natio=="subreg"){
      prov <- subset(ph_adm,  ADM1_EN %in% input$regio_list) %>% select(ADM2_EN) %>% unlist()
    }else{
      prov <- ph_adm$ADM2_EN
    }
  })
  
  #Price summarize based on  dynamic inputs:
  price_dfsub <- reactive({
    provs <-t1prov_sub()
    #function
    per_commod_summ<-function(x){
      x %>%
        dplyr::filter(Date >= input$T1Date[1] & Date <= input$T1Date[2]) %>%
        dplyr::filter(Admin_level == "Province") %>%
        dplyr::filter(Region.Province %in% provs) %>%
        group_by(Commodity, .drop = FALSE) %>%
        summarise(across(Price, list(average=mean,variability = sd), na.rm = TRUE)) %>%
        mutate_at(2:3, funs(round(., 2))) 
      
    }
    
    price_diff_time <- function(x){  
      x %>%
        dplyr::filter(Date >= input$T1Date[1] & Date <= input$T1Date[2]) %>%
        dplyr::filter(Admin_level == "Province") %>%
        dplyr::filter(Region.Province %in% provs) %>%
        dplyr::filter(Date == max(Date) | Date == min(Date)) %>%
        group_by(Commodity,Date) %>%
        summarise(across(Price, mean, na.rm = TRUE), .groups="drop_last") %>%
        mutate(Price_diff = Price - lag(Price)) %>%
        select(Commodity,Price_diff)%>%
        mutate_at(2, funs(round(., 2))) %>%
        drop_na(Price_diff)
    }
    
    diff <- df[which(commod_names %in% input$T1_CommGrp)] %>%
      lapply(.,  price_diff_time) %>%
      bind_rows()
    
    summ <-df[which(commod_names %in% input$T1_CommGrp)] %>%  
      lapply(., per_commod_summ) %>%
      bind_rows()
    
    dfs<-left_join(summ,diff,by="Commodity") %>%
      drop_na(Price_average)
  })
  
  
  
  #----------Horizontal bar plots------to improve! create for loop!------------
  #most expensive
  output$Pricebar_high <- renderPlot({
    bars <- price_dfsub() %>%
      top_n(n = 7, wt = Price_average)
    
    p <- ggplot(bars, aes(x = reorder(Commodity,Price_average), y = Price_average,
                          fill= reorder(Commodity,Price_average))) +
      geom_bar(stat = "identity", width = 0.75) +
      scale_fill_brewer(palette = "RdPu") +
      labs(y = "Average suggested retail price (SRP) in PhP", x = "Commodity",
           title = "Most expensive commodities") +
      coord_flip() +
      theme_minimal(base_size =15)
    
    p + theme(legend.position="none")
    
    print(p)
  })
  #cheapest:
  output$Pricebar_low <- renderPlot({
    bars <- price_dfsub() %>%
      top_n(n = -7, wt = Price_average)
    
    p <- ggplot(bars, aes(x = reorder(Commodity,Price_average,decreasing=T), y = Price_average,
                          fill= reorder(Commodity,Price_average,decreasing=T))) +
      geom_bar(stat = "identity", width = 0.75) +
      scale_fill_brewer(palette = "Greens") +
      labs(y = "Average suggested retail price (SRP) in PhP", x = "Commodity",
           title = "Cheapest commodities") +
      coord_flip() +
      theme_minimal(base_size =15)
    
    p + theme(legend.position="none")
  })
  #most stable price:
  output$Pricebar_stabi <- renderPlot({
    bars <- price_dfsub() %>%
      top_n(n = -7, wt = Price_variability)
    
    p<-ggplot(bars, aes(x = reorder(Commodity,Price_variability,decreasing=TRUE), y = Price_variability,
                        fill = reorder(Commodity,Price_variability,decreasing=TRUE))) +
      geom_bar(stat = "identity", width = 0.75)+
      scale_fill_brewer(palette = "Blues") +
      labs(y = "Retail price standard deviation in PhP", x = "Commodity",
           title = "Most stable prices") +
      coord_flip() +
      theme_minimal(base_size =15)
    
    p + theme(legend.position="none")
  })
  #Most variable/volatile price:
  output$Pricebar_volat <- renderPlot({
    bars <- price_dfsub() %>%
      top_n(n = 7, wt =Price_variability)
    
    p <- ggplot(bars, aes(x = reorder(Commodity,Price_variability), y = Price_variability,
                          fill = reorder(Commodity,Price_variability))) +
      geom_bar(stat = "identity", width = 0.75)+
      scale_fill_brewer(palette = "OrRd") +
      labs(y = "Retail price standard deviation in PhP", x = "Commodity",
           title = "Most volatile prices") +
      coord_flip() +
      theme_minimal(base_size =15)
    
    p + theme(legend.position="none")
  })
  #largest price diff:
  output$Pricebar_diffhigh <-renderPlot({
    bars <- price_dfsub() %>%
      top_n(n = 7, wt = Price_diff)
    
    p <- ggplot(bars, aes(x = reorder(Commodity,Price_diff), y = Price_diff,
                          fill = reorder(Commodity,Price_diff))) +
      geom_bar(stat = "identity", width = 0.75)+
      scale_fill_brewer(palette = "Purples") +
      labs(y = "in PhP", x = "Commodity",
           title = "Largest price change") +
      coord_flip() +
      theme_minimal(base_size = 15)
    
    p + theme(legend.position="none")
  })
  
  #Smallest price diff:
  output$Pricebar_difflow <- renderPlot({
    bars <- price_dfsub() %>%
      top_n(n = -7,wt = Price_diff)
    
    p <- ggplot(bars, aes(x = reorder(Commodity,Price_diff,decreasing=T), y =Price_diff,
                          fill = reorder(Commodity,Price_diff,decreasing=T))) +
      geom_bar(stat = "identity", width = 0.75)+
      scale_fill_brewer(palette = "GnBu") +
      labs(y = "in PhP", x = "Commodity",
           title = "Smallest price change") +
      coord_flip() +
      theme_minimal(base_size =15)
    
    p + theme(legend.position="none")
  })
  
  #table 
  output$text <- DT::renderDataTable(price_dfsub())
  # output$text <-renderText(t1prov_sub())
  
  #===============--------TAB 2----------================
  #T2 reactive UI:
  selectedvariable0 <- reactive({
    df[[grep(input$T2Var0,commod_names)]] #dataframe
  })
  #Update commodity
  observeEvent(selectedvariable0(), {#Update Commodity dropdown
    choices <- unique(selectedvariable0()$Commodity)
    updateSelectInput(inputId = "T2Var1", choices = choices) 
  })
  
  selectedvariable1 <- reactive({
    req(input$T2Var0)
    filter(selectedvariable0(), Commodity == input$T2Var1)
  })
  #Update Admin level
  observeEvent(selectedvariable1(), {#Update Admin_level dropdown
    choices <- unique(selectedvariable1()$Admin_level)
    updateSelectInput(inputId = "T2Var2", choices = choices)
  })
  
  selectedvariable2 <- reactive({
    req(input$T2Var1)
    filter(selectedvariable1(), Admin_level == input$T2Var2)
  })
  #Update Region/Province
  observeEvent(selectedvariable2(), { #Update specific province/Region
    choices <- unique(selectedvariable2()$Region.Province)
    updateSelectInput(inputId = "T2Var3", choices = choices)
  })
  
 selectedvariable3 <- reactive({
    req(input$T2Var2)
    filter(selectedvariable2(), Region.Province == input$T2Var3)
  })
 
  #Update Date
  observeEvent(selectedvariable3(), {
    choices <- unique(selectedvariable3()$Date)
    updateSliderInput(inputId = "T2Var5", min = min(choices), max = max(choices))
  })
  
  # renderUI for conditional checkbox subUnits
  output$condition_T2Var4 <- renderUI({
    if(input$T2Var2 != "Province"){
      checkboxInput("T2Var4", "Show subsequent sub-units?", value = FALSE)
    }
  }) 
  
  #T2 DATA WRANGLING:
  #1.NON-spatial:
  #subU based on checkbox
  subU <-reactive({
    if(input$T2Var4 == TRUE){
      if(input$T2Var2 == "Region"){
        subU <- ph_adm %>% 
          filter(word(ADM1_EN,1,2) == word(input$T2Var3,1,2))%>%
          select(ADM2_EN) %>%
          pull()
      }else if(input$T2Var2 == "Country"){
        subU <- ph_adm %>%
          filter(ADM0_EN == input$T2Var3) %>%
          distinct(ADM1_EN) %>%
          pull
      } else if(input$T2Var2 == "Province"){
        subU <-vector()
      }
    }else{
      subU <- vector()
    }
  })  

  
  dfsub <- reactive({
    dfsub <- df[[grep(input$T2Var0,commod_names)]] %>%
      dplyr::filter(Commodity == input$T2Var1 & Date >= input$T2Var5[1] & Date <= input$T2Var5[2])
    subU <-subU()
    
    if(input$T2Var2 == "Region"){
      dfsub %>% filter(word(Region.Province,1,2) == word(input$T2Var3,1,2) | Region.Province %in% subU)
      
      }else if(input$T2Var2 == "Country"){
      subU <- subU %>% append(input$T2Var3)
      dfsub %>% filter(grepl(paste0(subU,collapse="|"), Region.Province))
      
      }else if(input$T2Var2 == "Province"){
      dfsub %>% filter(Region.Province == input$T2Var3)
        }
    })
  
  # #2.Spatial (sf objects)
  geom_sub <-reactive({
    subU<-subU()
    
    if(input$T2Var2 == "Region"){
      ph_geom %>% filter(ADM1_EN %in% subU)
    }else if(input$T2Var2 == "Province"){
      ph_geom %>% filter(ADM2_EN == input$T2Var3)
    }else if(input$T2Var2 == "Country") {
      ph_geom
    }
    
  })
  
  #Centroid for zooming purposes
  centr <- reactive ({
    g <-  geom_sub()
    g %>% st_union() %>%st_centroid %>% unlist
  })
  
  #T2 PLOTS:
  #Time series
  output$Priceplot <- renderPlot({
    toplot1 <- dfsub() %>%
      dplyr::filter(Region.Province %in% input$T2Var3)
    
    toplot2 <- dfsub() %>%
      dplyr::filter(!Region.Province %in% input$T2Var3)
    
    p <- toplot2 %>%
      ggplot(aes(x = Date,y = Price, color = Region.Province)) +
      geom_line(size =0.6, alpha = 0.7) +
     # geom_point() +
      scale_x_date(limits = input$DateRange,labels = date_format("%b-%Y")) +
      labs(x = "Date", y = "Suggested Retail Price (SRP) in PhP",
             title=paste(input$T2Var1,input$T2Var3, sep = " - ")) +
      #main plot line
      geom_line(data = toplot1, aes(x = Date,y = Price,color  = Region.Province), color = "black",size =0.5) +
      geom_point(data = toplot1, aes(x = Date,y = Price,color  = Region.Province), color = "black",size = 2) + 
      theme_minimal(base_size = 17)
    
    p + theme(legend.position = 'bottom',legend.title = element_blank())
   },
   height=800)
  
  #Interactive map
  # output$PriceMap <-renderLeaflet({
  #   cn <-centr()
  #   poly <- geom_sub()
  # 
  #   m <- leaflet(data = poly) %>%
  #     addTiles() %>%
  #     setView(lng = cn[[1]], lat = cn[[2]], zoom = 6)%>%
  #     addPolygons(weight=1)
  #   m

  # })
  # output$PriceMap <- renderLeaflet({
  #   # poly <- geom_sub()
  # 
  #   leaflet() %>%
  #     addProviderTiles(providers$Stamen.TonerLite,
  #                      options = providerTileOptions(noWrap = TRUE)) %>%
  #     setView(lng = 122.5, lat = 12.5, zoom = 6)%>%
  #     addPolygons(data = ph_geom(), weight=1)
  # })
  
  # observeEvent (input$T2Var2, {
  #   leafletProxy("PriceMap") %>%
  #     clearShapes() %>%
  #     addPolygons(data=geom_sub(),stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, popup = popup)
  # })
  
}