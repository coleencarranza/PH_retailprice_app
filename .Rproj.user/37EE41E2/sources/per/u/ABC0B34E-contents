#Price summarize based on  dynamic inputs:
price_dfsub <- reactive({
  provs <-t1prov_sub()
  #function
  per_commod_summ<-function(x){
    x %>%
      dplyr::filter(Date >= as.Date("2015-01-01","%Y-%m-%d") & Date <= as.Date("2019-01-01","%Y-%m-%d")) %>%
      dplyr::filter(Admin_level == "Province") %>%
      dplyr::filter(Region.Province %in% provs) %>%
      group_by(Commodity, .drop = FALSE) %>%
      summarise(across(Price, list(average=mean,variability = sd), na.rm = TRUE)) %>%
      mutate_at(2:3, funs(round(., 2))) 
    
  }
  
  price_diff_time <- function(x){  
    x %>%
      dplyr::filter(Date >= as.Date("2015-01-01","%Y-%m-%d") & Date <= as.Date("2019-01-01","%Y-%m-%d")) %>%
      dplyr::filter(Admin_level == "Province") %>%
      dplyr::filter(Region.Province %in% provs) %>%
      dplyr::filter(Date == max(Date) | Date == min(Date)) %>%
      group_by(Commodity,Date) %>%
      summarise(across(Price, mean, na.rm = TRUE), .groups="drop_last") %>%
      mutate(Price_diff = Price - lag(Price)) %>%
      drop_na(Price_diff) %>%
      select(Commodity,Price_diff)%>%
      mutate_at(2, funs(round(., 2))) 
  }
  
  diff <- df[which(commod_names %in% c("BeansLegumes","Cereals"))] %>%
    lapply(.,  price_diff_time) %>%
    bind_rows()
  
  summ <-df[which(commod_names %in% c("BeansLegumes","Cereals"))] %>%  
    lapply(., per_commod_summ) %>%
    bind_rows()
  
  dfs<-left_join(summ,diff,by="Commodity")%>%
    drop_na(Price_average)
})

bars <- dfs %>%
  top_n(n = -7, wt = Price_diff)

ggplot(bars, aes(x = reorder(Commodity,Price_diff), y = Price_diff)) +
  geom_bar(stat = "identity",fill="lightgoldenrod") +
  labs(y = "in PhP", x = "Commodity",
       title = "Largest price change") +
  coord_flip() +
  theme_bw(base_size = 15)